[Any.__dealloc__]
smeth = """function (o)
    isnull(uptr(o).weaklist[]) || ccall((:PyObject_ClearWeakRefs, PYLIB), Cvoid, (PyPtr,), o)
    delete!(PYJLGCCACHE, ptr(o))
    nothing
end"""
unwrap = false
catch = false

[Any.__repr__]
smeth = """o -> unsafe_pystr("<julia $(repr(o))>")"""

[Any.__str__]
smeth = """o -> unsafe_pystr(string(o))"""

[Any.__hash__]
smeth = """o -> zero(CPy_hash_t)"""

[Any.__iter__]
smeth = """o -> unsafe_pyjulia(Iterator(o))"""
if = "hasmethod(iterate, Tuple{T})"

[Any.__len__]
smeth = "length"
if = "hasmethod(length, Tuple{T})"

[Any.__getitem__]
smeth = """function (o, _k)
    k = @safe unsafe_pyconvertkey(o, _k)
    return unsafe_pyobj(getindex(o, k))
    @label error
    return PYNULL
end"""
if = "hasmethod(getindex, Tuple{T, Union{}})"

[Any.__setitem__]
smeth = """function (o, _k, _v)
    k = @safe unsafe_pyconvertkey(o, _k)
    v = @safe unsafe_pyconvertvalue(o, k, _v)
    setindex!(o, v, k)
    return 0
    @label error
    return -1
end"""
if = "hasmethod(setindex!, Tuple{T, Union{}, Union{}})"

[Any.__getattr__]
smeth = """function (__o, __a)
    _o = PyBorrowedRef(__o)
    _a = PyBorrowedRef(__a)
    # generic lookup
    r = unsafe_pygenericgetattr(_o, _a)
    if !isnull(r) || !pyerror_occurred_AttributeError()
        return r
    end
    # julia property?
    o = _unsafe_pyjulia_getvalue(_o)
    a = Symbol(@safe unsafe_pystr_asjuliastring(_a))
    if hasproperty(o, a)
        pyerror_clear()
        return unsafe_pyobj(getproperty(o, a))
    end
    return r
    @label error
    return PYNULL
end"""
unwrap = false

[Any.__dir__]
meth = """function (_o)
    # call the generic __dir__
    obj = @safe unsafe_pyobjecttype()
    dir = @safe unsafe_pygetattr(obj, "__dir__")
    d   = @safe unsafe_pycall(dir, _o)
    # add properties of o
    o = _unsafe_pyjulia_getvalue(_o)
    for a in propertynames(o)
        k = @safe unsafe_pystr(string(a))
        @safe unsafe_pylist_append(d, k)
    end
    return d
    @label error
    return PYNULL
end"""
flags = ["noargs"]
unwrap = false

[Any.__contains__]
smeth = """function(o, vo)
    v = unsafe_pytryconvertvalue(o, vo)
    if v.iserr
        return -1
    elseif v.isnothing
        return 0
    elseif v.value in o
        return 1
    else
        return 0
    end
end"""
if = "hasmethod(in, Tuple{Union{}, T})"

[Iterator.__next__]
smeth = """function (o)
    source = o.source
    state = o.state
    x = state === nothing ? iterate(source) : iterate(source, something(state))
    if x === nothing
        pyerror_set_StopIteration()
        return PYNULL
    else
        val, state = x
        o.state = Some(state)
        return unsafe_pyobj(val)
    end
end"""

[Iterator.__iter__]
smeth = "o -> incref!(PyBorrowedRef(o))"
unwrap = false
catch = false

[AbstractArray.__getitem__]
smeth = """function (o, ko)
    k = @safe unsafe_pyconvertarrayindices(o, ko)
    if checkbounds(Bool, o, k...)
        return unsafe_pyobj(o[k...])
    else
        pyerror_set_IndexError("array index out of bounds")
    end
    @label error
    return PYNULL
end"""

[AbstractArray.__setitem__]
smeth = """function (o, ko, vo)
    k = @safe unsafe_pyconvertarrayindices(o, ko)
    if !isa(k, Tuple{Vararg{Int}})
        pyerror_set_TypeError("can only set single array items")
        return -1
    end
    v = @safe unsafe_pyconvertvalue(o, vo)
    if checkbounds(Bool, o, k...)
        o[k...] = v
        return 0
    else
        pyerror_set_IndexError("array index out of bounds")
    end
    @label error
    return -1
end"""

[AbstractArray.shape]
get = """o -> unsafe_pytuple_fromiter(size(o))"""

[StridedArray.__array_interface__]
get = """function (o)
    d = Dict{String, PyObject}()
    d["shape"] = @safe unsafe_pytuple_fromiter(size(o))
    x, y, elsize = numpy_typestr_descr(eltype(o))
    isnull(x) && @goto error
    d["typestr"] = x
    isnull(y) || (d["descr"] = y)
    d["data"] = @safe unsafe_pytuple_fromiter((convert(Integer, Base.unsafe_convert(Ptr{eltype(o)}, o)), isimmutable(o)))
    d["strides"] = @safe unsafe_pytuple_fromiter(elsize .* strides(o))
    d["version"] = @safe unsafe_pyint(3)
    return unsafe_pydict_fromstringpairs(d)
    @label error
    return PYNULL
end"""

[AbstractVector.__getitem_int__]
smeth = "(o,i) -> unsafe_pyobj(getindex(o, i+firstindex(o)))"

[AbstractVector.index]
meth = """function(o, vo)
    v = unsafe_pytryconvertvalue(o, vo)
    v.iserr && return PYNULL
    if !v.isnothing
        i = findfirst(==(v.value), o)
        i === nothing || return unsafe_pyint(i-firstindex(o))
    end
    pyerror_set_ValueError("value not found")
    return PYNULL
end"""
flags = ["onearg"]

[AbstractVector.count]
meth = """function(o, vo)
    v = unsafe_pytryconvertvalue(o, vo)
    if v.iserr
        return PYNULL
    elseif v.isnothing
        n = 0
    else
        n = count(==(v.value), o)
    end
    return unsafe_pyint(n)
end"""
flags = ["onearg"]

[AbstractVector.reverse]
meth = "o -> (reverse!(o); unsafe_pynone())"
if = "hasmethod(reverse!, Tuple{T})"
flags = ["noargs"]

[AbstractVector.__reversed__]
meth = "o -> unsafe_pyjulia(reverse(o))"
if = "hasmethod(reverse, Tuple{T})"
flags = ["noargs"]

[AbstractVector.sort]
meth = "o -> (sort!(o); unsafe_pynone())"
if = "hasmethod(sort!, Tuple{T})"
flags = ["noargs"]

[AbstractVector.append]
meth = """function (o, vo)
    v = @safe unsafe_pyconvertvalue(o, vo)
    push!(o, v)
    return unsafe_pynone()
    @label error
    return PYNULL
end"""
flags = ["onearg"]

[AbstractVector.extend]
meth = """function (o, vs)
    vi = @safe unsafe_pyiter(vs)
    while true
        vo = unsafe_pyiter_next(vi)
        if !isnull(vo)
            v = @safe unsafe_pyconvertvalue(o, vo)
            push!(o, v)
        elseif pyerror_occurred()
            return PYNULL
        else
            break
        end
    end
    return unsafe_pynone()
    @label error
    return PYNULL
end"""
flags = ["onearg"]

[AbstractVector.__iconcat__]
smeth = """function (_o, _vs)
    o = _unsafe_pyjulia_getvalue(_o)
    vs = PyBorrowedRef(_vs)
    vi = @safe unsafe_pyiter(vs)
    while true
        vo = unsafe_pyiter_next(vi)
        if !isnull(vo)
            v = @safe unsafe_pyconvertvalue(o, vo)
            push!(o, v)
        elseif pyerror_occurred()
            return PYNULL
        else
            break
        end
    end
    return unsafe_pyobj(PyRef(_o, true))
    @label error
    return PYNULL
end"""
unwrap = false

[AbstractVector.__concat__]
smeth = """function (o, vs)

    # if vs is a julia wrapped array, use julia concatenation
    if pyisjulia(vs)
        jvs = _unsafe_pyjulia_getvalue(vs)
        if jvs isa AbstractVector
            return unsafe_pyjulia([o; jvs])
        end
    end

    # default: aggregate into a list
    r = @safe unsafe_pylist_new()
    for x in o
        @safe unsafe_pylist_append(r, x)
    end
    vi = @safe unsafe_pyiter(vs)
    while true
        vo = unsafe_pyiter_next(vi)
        if !isnull(vo)
            @safe unsafe_pylist_append(r, vo)
        elseif pyerror_occurred()
            return PYNULL
        else
            break
        end
    end
    return r
    @label error
    return PYNULL
end"""

[AbstractVector.__repeat__]
smeth = """(o, n) -> unsafe_pyjulia(repeat(o, max(0, n)))
"""

[AbstractVector.__irepeat__]
smeth = """function(_o, n)
    o = _unsafe_pyjulia_getvalue(_o)
    if n â‰¤ 0
        empty!(o)
    elseif n > 1
        len = length(o)
        for i in (len+1):(n*len)
            push!(o, @inbounds(o[i-len]))
        end
    end
    return unsafe_pyobj(PyRef(_o, true))
    @label error
    return PYNULL
end"""
unwrap = false

[AbstractVector.pop]
meth = """function (o, _a)
    i, = @safe @unsafe_pyargparse _a (i::Int=-1,)
    j = i < 0 ? lastindex(o)+i+1 : firstindex(o)+i
    if isempty(o)
        pyerror_set_IndexError("pop from empty vector")
        @goto error
    elseif checkbounds(Bool, o, j)
        v = o[j]
        deleteat!(o, j)
    else
        pyerror_set_IndexError("vector index out of bounds")
        @goto error
    end
    return unsafe_pyobj(v)
    @label error
    return PYNULL
end"""
flags = ["varargs"]

[AbstractVector.remove]
meth = """function (o, vo)
    v = unsafe_pytryconvertvalue(o, vo)
    v.iserr && return PYNULL
    if !v.isnothing
        i = findfirst(==(v.value), o)
        if i !== nothing
            deleteat!(o, i)
            return unsafe_pynone()
        end
    end
    pyerror_set_ValueError("value not found")
    return PYNULL
end"""
flags = ["onearg"]

[AbstractDict.keys]
meth = "o -> unsafe_pyjulia(keys(o))"
flags = ["noargs"]

[AbstractDict.values]
meth = "o -> unsafe_pyjulia(values(o))"
flags = ["noargs"]

[AbstractDict.__iter__]
smeth = """o -> unsafe_pyjulia(Iterator(keys(o)))"""

[AbstractDict.items]
meth = "o -> unsafe_pyjulia(PairSet(o))"
flags = ["noargs"]

[AbstractDict.get]
meth = """function (o, _a)
    ko, d = @safe @unsafe_pyargparse _a (key::PyObject, default::PyObject=(@safe unsafe_pynone()))
    k = unsafe_pytryconvertkey(o, ko)
    if k.iserr
        @label error
        return PYNULL
    elseif k.isnothing
        return d
    else
        return unsafe_pyobj(get(o, k.value, d))
    end
end"""
flags = ["varargs"]

[AbstractDict.__contains__]
smeth = """function (o, ko)
    k = unsafe_pytryconvertkey(o, ko)
    if k.iserr
        return -1
    elseif k.isnothing
        return 0
    elseif haskey(o, k.value)
        return 1
    else
        return 0
    end
end"""

[Number.__bool__]
smeth = "o -> !iszero(o)"
if = "hasmethod(iszero, Tuple{T})"

[Number.__neg__]
smeth = "o -> unsafe_pyjulia(-o)"
if = "hasmethod(-, Tuple{T})"

[Number.__pos__]
smeth = "o -> unsafe_pyjulia(+o)"
if = "hasmethod(+, Tuple{T})"

[Number.__abs__]
smeth = "o -> unsafe_pyjulia(abs(o))"
if = "hasmethod(abs, Tuple{T})"

[Number.__int__]
smeth = "o -> unsafe_pyint(convert(Integer, o))"
if = "hasmethod(convert, Tuple{Type{Integer}, T})"

[Number.__float__]
smeth = "o -> unsafe_pyfloat(convert(Real, o))"
if = "hasmethod(convert, Tuple{Type{Real}, T})"

[AnyComplex.conjugate]
meth = "o -> unsafe_pyjulia(conj(o))"
flags = ["noargs"]

[AnyComplex.real]
get = "o -> unsafe_pyjulia(real(o))"

[AnyComplex.imag]
get = "o -> unsafe_pyjulia(imag(o))"

[Real.__float__]
smeth = "o -> unsafe_pyfloat(o)"

[Real.__int__]
smeth = "o -> unsafe_pyint(round(Integer, o))"
if = "hasmethod(round, Tuple{Type{Integer}, T})"

[Real.__trunc__]
meth = "o -> unsafe_pyint(trunc(Integer, o))"
if = "hasmethod(trunc, Tuple{Type{Integer}, T})"
flags = ["noargs"]

[Real.__floor__]
meth = "o -> unsafe_pyint(floor(Integer, o))"
if = "hasmethod(floor, Tuple{Type{Integer}, T})"
flags = ["noargs"]

[Real.__ceil__]
meth = "o -> unsafe_pyint(ceil(Integer, o))"
if = "hasmethod(ceil, Tuple{Type{Integer}, T})"
flags = ["noargs"]

[Real.__round__]
meth = """function (o, _a)
    d, = @safe @unsafe_pyargparse _a (digits::Union{Int,Nothing}=nothing,)
    if d === nothing
        return unsafe_pyint(round(Integer, o))
    else
        return unsafe_pyjulia(round(o, digits=d))
    end
    @label error
    return PYNULL
end"""
if = "hasmethod(round, Tuple{Type{Integer}, T}) && hasmethod(round, Tuple{T})"
flags = ["varargs"]

[AnyRational.numerator]
get = "o -> unsafe_pyjulia(numerator(o))"

[AnyRational.denominator]
get = "o -> unsafe_pyjulia(denominator(o))"

[Integer.__index__]
smeth = "o -> unsafe_pyint(o)"

[Integer.__invert__]
smeth = "o -> unsafe_pyjulia(~o)"
if = "hasmethod(~, Tuple{T})"

[[IO.close]]
meth = """o -> (close(o); unsafe_pynone())"""
if = "hasmethod(close, Tuple{T})"
flags = ["noargs"]
[[IO.close]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("close"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.closed]]
get = """o -> unsafe_pybool(!isopen(o))"""
if = "hasmethod(isopen, Tuple{T})"
[[IO.closed]]
get = """o -> (pyerror_set_IOUnsupportedOperation("closed"); PYNULL)"""
unwrap = false
catch = false

[[IO.fileno]]
meth = """o -> unsafe_pyint(fd(o))"""
if = "hasmethod(fd, Tuple{T})"
flags = ["noargs"]
[[IO.fileno]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("fileno"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.flush]]
meth = """o -> (flush(o); unsafe_pynone())"""
if = "hasmethod(flush, Tuple{T})"
flags = ["noargs"]
[[IO.flush]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("flush"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.isatty]]
meth = """o -> unsafe_pytrue()"""
if = "T <: Base.TTY"
flags = ["noargs"]
unwrap = false
catch = false
[[IO.isatty]]
meth = """o -> unsafe_pyfalse()"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.readable]]
meth = """o -> unsafe_pybool(isreadable(o))"""
if = "hasmethod(isreadable, Tuple{T})"
flags = ["noargs"]
[[IO.readable]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("readable"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.seek]]
meth = """function (o, _a)
    n, wh = @safe @unsafe_pyargparse _a (offset::Int, whence::Int=0)
    if wh == 0
        seekstart(o)
        seek(o, position(o) + n)
    elseif wh == 1
        seek(o, n)
    elseif wh == 2
        seekend(o)
        seek(o, position(o) + n)
    else
        pyerror_set_IOUnsupportedOperation("seek with whence = $wh")
        @goto error
    end
    return unsafe_pyint(position(o))
    @label error
    return PYNULL
end"""
if = "hasmethod(position, Tuple{T}) && hasmethod(seek, Tuple{T,Int}) && hasmethod(seekstart, Tuple{T}) && hasmethod(seekend, Tuple{T})"
flags = ["varargs"]
[[IO.seek]]
meth = """(o, a) -> (pyerror_set_IOUnsupportedOperation("seek"); PYNULL)"""
flags = ["varargs"]
unwrap = false
catch = false

[[IO.seekable]]
meth = """o -> unsafe_pytrue()"""
if = "hasmethod(position, Tuple{T}) && hasmethod(seek, Tuple{T,Int}) && hasmethod(seekstart, Tuple{T}) && hasmethod(seekend, Tuple{T})"
flags = ["noargs"]
unwrap = false
catch = false
[[IO.seekable]]
meth = """o -> unsafe_pyfalse()"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.tell]]
meth = """o -> unsafe_pyint(position(o))"""
if = "hasmethod(position, Tuple{T})"
flags = ["noargs"]
[[IO.tell]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("tell"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

[[IO.truncate]]
meth = """function (o, _a)
    n, = @safe @unsafe_pyargparse _a (size::Union{Int,Nothing}=nothing,)
    n = n===nothing ? position(o) : n
    truncate(o, n)
    return unsafe_pynone()
    @label error
    return PYNULL
end"""
flags = ["varargs"]
if = "hasmethod(truncate, Tuple{T,Int})"
[[IO.truncate]]
meth = """(o, a) -> (pyerr_set_UnsupportedOperation("truncate"); PYNULL)"""
flags = ["varargs"]
unwrap = false
catch = false

[[IO.writable]]
meth = """o -> unsafe_pybool(iswritable(o))"""
if = "hasmethod(iswritable, Tuple{T})"
flags = ["noargs"]
[[IO.writable]]
meth = """o -> (pyerror_set_IOUnsupportedOperation("writable"); PYNULL)"""
flags = ["noargs"]
unwrap = false
catch = false

# TODO: only make one system call
[AsPyRawIO.read]
meth = """function(o, _a)
    n, = @safe @unsafe_pyargparse _a (size::Union{Int,Nothing}=nothing,)
    if n===nothing || n<0
        x = read(o)
    else
        x = read(o, n)
    end
    return unsafe_pybytes(x)
    @label error
    return PYNULL
end"""
flags = ["varargs"]

[AsPyRawIO.readall]
meth = """o -> unsafe_pybytes(read(o))"""
flags = ["noargs"]

# TODO: only make one system call
[AsPyRawIO.readinto]
meth = """function (o, b)
    buf = @safe unsafe_PyBuffer(b, CPyBUF_WRITABLE)
    arr = unsafe_wrap(Array, Ptr{UInt8}(buf.buf), buf.len)
    num = readbytes!(o, arr)
    return unsafe_pyint(num)
    @label error
    return PYNULL
end"""
flags = ["onearg"]

# TODO: only make one system call
[AsPyRawIO.write]
meth = """function(o, b)
    buf = @safe unsafe_PyBuffer(b, CPyBUF_SIMPLE)
    arr = unsafe_wrap(Array, Ptr{UInt8}(buf.buf), buf.len)
    num = write(o, arr)
    return unsafe_pyint(num)
    @label error
    return PYNULL
end"""
flags = ["onearg"]

[AsPyBufferedIO.detach]
meth = """o -> (pyerror_set_IOUnsupportedOperation("detach"); PYNULL)"""
flags = ["noargs"]

[AsPyBufferedIO.read]
meth = """function (o, _a)
    n, = @safe @unsafe_pyargparse _a (n::Union{Int,Nothing}=nothing,)
    if n===nothing || n < 0
        x = read(o)
    else
        x = read(o, n)
    end
    return unsafe_pybytes(x)
    @label error
    return PYNULL
end"""
flags = ["varargs"]

# TODO: only make one system call
[AsPyBufferedIO.read1]
meth = """function (o, _a)
    a = @safe @unsafe_pyargparse _a (n::Union{Int,Nothing}=nothing,)
    if a.n===nothing || a.n < 0
        x = read(o)
    else
        x = read(o, a.n)
    end
    return unsafe_pybytes(x)
    @label error
    return PYNULL
end"""
flags = ["varargs"]

[AsPyBufferedIO.readinto]
meth = """function(o, b)
    buf = @safe unsafe_PyBuffer(b, CPyBUF_WRITABLE)
    arr = unsafe_wrap(Array, Ptr{UInt8}(buf.buf), buf.len)
    num = readbytes!(o, arr)
    return unsafe_pyint(num)
    @label error
    return PYNULL
end"""
flags = ["onearg"]

# TODO: only make one system call
[AsPyBufferedIO.readinto1]
meth = """function(o, b)
    buf = @safe unsafe_PyBuffer(b, CPyBUF_WRITABLE)
    arr = unsafe_wrap(Array, Ptr{UInt8}(buf.buf), buf.len)
    num = readbytes!(o, arr)
    return unsafe_pyint(num)
    @label error
    return PYNULL
end"""
flags = ["onearg"]

[AsPyBufferedIO.write]
meth = """function(o, b)
    buf = @safe unsafe_PyBuffer(b, CPyBUF_SIMPLE)
    arr = unsafe_wrap(Array, Ptr{UInt8}(buf.buf), buf.len)
    num = write(o, arr)
    return unsafe_pyint(num)
    @label error
    return PYNULL
end"""
flags = ["onearg"]
