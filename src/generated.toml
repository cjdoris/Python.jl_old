### OBJECT

[pytruth]
cfunc = "PyObject_IsTrue O B"

[pynot]
cfunc = "PyObject_Not O B"

[pyrepr]
cfunc = "PyObject_Repr O O"

[pyascii]
cfunc = "PyObject_ASCII O O"

[pydir]
cfunc = "PyObject_Dir O O"

[pyhasattr]
cfunc = ["PyObject_HasAttr O O B", "PyObject_HasAttrString O S B"]

[pygetattr]
cfunc = ["PyObject_GetAttr O O O", "PyObject_GetAttrString O S O"]

[pygenericgetattr]
cfunc = "PyObject_GenericGetAttr O O O"
safe = false

[pysetattr]
cfunc = ["PyObject_SetAttr O O O V", "PyObject_SetAttrString O S O V"]

[pydelattr]
cfunc = ["PyObject_DelAttr O O V", "PyObject_DelAttrString O S V"]

[pycompare_obj]
cfunc = "PyObject_RichCompare O O =CPy_CompareOp O"
export = false

[pycompare]
cfunc = "PyObject_RichCompareBool O O =CPy_CompareOp B"

[pyissubclass]
cfunc = "PyObject_IsSubclass O O B"

[pyisinstance]
cfunc = "PyObject_IsInstance O O B"

[pyobjecttype]
cachedobj = {cobj="PyBaseObject_Type"}
caller = "pyobject"

[pyhash]
cfunc = "PyObject_Hash O !CPy_hash_t"

[pylen]
cfunc = "PyObject_Length O !CPy_ssize_t"

[pyiter]
cfunc = "PyObject_GetIter O O"

[pygetitem]
cfunc = "PyObject_GetItem O O O"

[pysetitem]
cfunc = "PyObject_SetItem O O O V"

[pydelitem]
cfunc = "PyObject_DelItem O O V"

### TYPE

[pytypetype]
cachedobj = {cobj="PyType_Type"}
caller = "pytype"

[pyistype]
typechecks_fast = "CPy_TPFLAGS_TYPE_SUBCLASS"

### SUPER

[pysupertype]
cachedobj = {cobj="PySuper_Type"}
caller = "pysuper"
typechecker = "pyissuper"

### NONE

[pynone]
cachedobj = {cobj="_Py_NoneStruct"}

[pynonetype]
cachedobj = {expr="unsafe_pytype(unsafe_pynone())"}

### ERRORS

[pyerror_clear]
cfunc = "PyErr_Clear ==Cvoid"
unsafe = false

[pyerror_ptr]
cfunc = "PyErr_Occurred ==Ptr{Cvoid}"
safe = false

[pyerror_set]
cfunc = ["PyErr_SetNone ?O ==Cvoid", "PyErr_SetString ?O S ==Cvoid", "PyErr_SetObject ?O ?O ==Cvoid"]
unsafe = false

[pyerror_givenexceptionmatches]
cfunc = "PyErr_GivenExceptionMatches ?O ?O =B"
unsafe = false

[pyisexception]
typechecks_fast = "CPy_TPFLAGS_BASE_EXC_SUBCLASS"

### EXCEPTIONS

[pyexc_BaseException_type]
cachedobj = {cobjptr="PyExc_BaseException"}
errsetter = "pyerror_set_BaseException"
errchecker = "pyerror_occurred_BaseException"

[pyexc_Exception_type]
cachedobj = {cobjptr="PyExc_Exception"}
errsetter = "pyerror_set_Exception"
errchecker = "pyerror_occurred_Exception"

[pyexc_StopIteration_type]
cachedobj = {cobjptr="PyExc_StopIteration"}
errsetter = "pyerror_set_StopIteration"
errchecker = "pyerror_occurred_StopIteration"

[pyexc_GeneratorExit_type]
cachedobj = {cobjptr="PyExc_GeneratorExit"}
errsetter = "pyerror_set_GeneratorExit"
errchecker = "pyerror_occurred_GeneratorExit"

[pyexc_ArithmeticError_type]
cachedobj = {cobjptr="PyExc_ArithmeticError"}
errsetter = "pyerror_set_ArithmeticError"
errchecker = "pyerror_occurred_ArithmeticError"

[pyexc_LookupError_type]
cachedobj = {cobjptr="PyExc_LookupError"}
errsetter = "pyerror_set_LookupError"
errchecker = "pyerror_occurred_LookupError"

[pyexc_AssertionError_type]
cachedobj = {cobjptr="PyExc_AssertionError"}
errsetter = "pyerror_set_AssertionError"
errchecker = "pyerror_occurred_AssertionError"

[pyexc_AttributeError_type]
cachedobj = {cobjptr="PyExc_AttributeError"}
errsetter = "pyerror_set_AttributeError"
errchecker = "pyerror_occurred_AttributeError"

[pyexc_BufferError_type]
cachedobj = {cobjptr="PyExc_BufferError"}
errsetter = "pyerror_set_BufferError"
errchecker = "pyerror_occurred_BufferError"

[pyexc_EOFError_type]
cachedobj = {cobjptr="PyExc_EOFError"}
errsetter = "pyerror_set_EOFError"
errchecker = "pyerror_occurred_EOFError"

[pyexc_FloatingPointError_type]
cachedobj = {cobjptr="PyExc_FloatingPointError"}
errsetter = "pyerror_set_FloatingPointError"
errchecker = "pyerror_occurred_FloatingPointError"

[pyexc_OSError_type]
cachedobj = {cobjptr="PyExc_OSError"}
errsetter = "pyerror_set_OSError"
errchecker = "pyerror_occurred_OSError"

[pyexc_ImportError_type]
cachedobj = {cobjptr="PyExc_ImportError"}
errsetter = "pyerror_set_ImportError"
errchecker = "pyerror_occurred_ImportError"

[pyexc_IndexError_type]
cachedobj = {cobjptr="PyExc_IndexError"}
errsetter = "pyerror_set_IndexError"
errchecker = "pyerror_occurred_IndexError"

[pyexc_KeyError_type]
cachedobj = {cobjptr="PyExc_KeyError"}
errsetter = "pyerror_set_KeyError"
errchecker = "pyerror_occurred_KeyError"

[pyexc_KeyboardInterrupt_type]
cachedobj = {cobjptr="PyExc_KeyboardInterrupt"}
errsetter = "pyerror_set_KeyboardInterrupt"
errchecker = "pyerror_occurred_KeyboardInterrupt"

[pyexc_MemoryError_type]
cachedobj = {cobjptr="PyExc_MemoryError"}
errsetter = "pyerror_set_MemoryError"
errchecker = "pyerror_occurred_MemoryError"

[pyexc_NameError_type]
cachedobj = {cobjptr="PyExc_NameError"}
errsetter = "pyerror_set_NameError"
errchecker = "pyerror_occurred_NameError"

[pyexc_OverflowError_type]
cachedobj = {cobjptr="PyExc_OverflowError"}
errsetter = "pyerror_set_OverflowError"
errchecker = "pyerror_occurred_OverflowError"

[pyexc_RuntimeError_type]
cachedobj = {cobjptr="PyExc_RuntimeError"}
errsetter = "pyerror_set_RuntimeError"
errchecker = "pyerror_occurred_RuntimeError"

[pyexc_NotImplementedError_type]
cachedobj = {cobjptr="PyExc_NotImplementedError"}
errsetter = "pyerror_set_NotImplementedError"
errchecker = "pyerror_occurred_NotImplementedError"

[pyexc_SyntaxError_type]
cachedobj = {cobjptr="PyExc_SyntaxError"}
errsetter = "pyerror_set_SyntaxError"
errchecker = "pyerror_occurred_SyntaxError"

[pyexc_IndentationError_type]
cachedobj = {cobjptr="PyExc_IndentationError"}
errsetter = "pyerror_set_IndentationError"
errchecker = "pyerror_occurred_IndentationError"

[pyexc_TabError_type]
cachedobj = {cobjptr="PyExc_TabError"}
errsetter = "pyerror_set_TabError"
errchecker = "pyerror_occurred_TabError"

[pyexc_ReferenceError_type]
cachedobj = {cobjptr="PyExc_ReferenceError"}
errsetter = "pyerror_set_ReferenceError"
errchecker = "pyerror_occurred_ReferenceError"

[pyexc_SystemError_type]
cachedobj = {cobjptr="PyExc_SystemError"}
errsetter = "pyerror_set_SystemError"
errchecker = "pyerror_occurred_SystemError"

[pyexc_SystemExit_type]
cachedobj = {cobjptr="PyExc_SystemExit"}
errsetter = "pyerror_set_SystemExit"
errchecker = "pyerror_occurred_SystemExit"

[pyexc_TypeError_type]
cachedobj = {cobjptr="PyExc_TypeError"}
errsetter = "pyerror_set_TypeError"
errchecker = "pyerror_occurred_TypeError"

[pyexc_UnboundLocalError_type]
cachedobj = {cobjptr="PyExc_UnboundLocalError"}
errsetter = "pyerror_set_UnboundLocalError"
errchecker = "pyerror_occurred_UnboundLocalError"

[pyexc_UnicodeError_type]
cachedobj = {cobjptr="PyExc_UnicodeError"}
errsetter = "pyerror_set_UnicodeError"
errchecker = "pyerror_occurred_UnicodeError"

[pyexc_UnicodeEncodeError_type]
cachedobj = {cobjptr="PyExc_UnicodeEncodeError"}
errsetter = "pyerror_set_UnicodeEncodeError"
errchecker = "pyerror_occurred_UnicodeEncodeError"

[pyexc_UnicodeDecodeError_type]
cachedobj = {cobjptr="PyExc_UnicodeDecodeError"}
errsetter = "pyerror_set_UnicodeDecodeError"
errchecker = "pyerror_occurred_UnicodeDecodeError"

[pyexc_UnicodeTranslateError_type]
cachedobj = {cobjptr="PyExc_UnicodeTranslateError"}
errsetter = "pyerror_set_UnicodeTranslateError"
errchecker = "pyerror_occurred_UnicodeTranslateError"

[pyexc_ValueError_type]
cachedobj = {cobjptr="PyExc_ValueError"}
errsetter = "pyerror_set_ValueError"
errchecker = "pyerror_occurred_ValueError"

[pyexc_ZeroDivisionError_type]
cachedobj = {cobjptr="PyExc_ZeroDivisionError"}
errsetter = "pyerror_set_ZeroDivisionError"
errchecker = "pyerror_occurred_ZeroDivisionError"

[pyexc_IOUnsupportedOperation_type]
cachedobj = {expr="""unsafe_pyimportattr("io", "UnsupportedOperation")"""}
errsetter = "pyerror_set_IOUnsupportedOperation"
errchecker = "pyerror_occurred_IOUnsupportedOperation"

### IMPORT

[pyimport]
cfunc = ["PyImport_ImportModule S O", "PyImport_Import O O"]

### STR

[pystrtype]
cachedobj = {cobj="PyUnicode_Type"}
caller = "pystr"

[pyisstr]
typechecks_fast = "CPy_TPFLAGS_UNICODE_SUBCLASS"

[pystr]
cfunc = "PyObject_Str O O"

[pystr_asutf8string]
cfunc = "PyUnicode_AsUTF8String O O"
safe = false

[pystr_decodeutf8]
cfunc = "PyUnicode_DecodeUTF8 =Any/Cstring =Any/CPy_ssize_t =Any/Cstring O"
safe = false

### BYTES

[pybytestype]
cachedobj = {cobj="PyBytes_Type"}
caller = "pybytes"

[pyisbytes]
typechecks_fast = "CPy_TPFLAGS_BYTES_SUBCLASS"

[pybytes]
cfunc = "PyObject_Bytes O O"

### ITER

[pyiter_next]
cfunc = "PyIter_Next O ?O"
safe = false

### BOOL

[pybooltype]
cachedobj = {cobj="PyBool_Type"}
caller = "pybool"
typechecker = "pyisbool"

[pytrue]
cachedobj = {cobj="_Py_TrueStruct"}

[pyfalse]
cachedobj = {cobj="_Py_FalseStruct"}

### INT

[pyinttype]
cachedobj = {cobj="PyLong_Type"}
caller = "pyint"

[pyisint]
typechecks_fast = "CPy_TPFLAGS_LONG_SUBCLASS"

[pyint]
cfunc = "PyNumber_Long O O"

[pyint_fromlonglong]
cfunc = "PyLong_FromLongLong =Any/Clonglong O"
safe = false

[pyint_fromulonglong]
cfunc = "PyLong_FromUnsignedLongLong =Any/Clonglong O"
safe = false

[pyint_aslonglong]
cfunc = "PyLong_AsLongLong O ?Clonglong"
safe = false

[pyint_asulonglong]
cfunc = "PyLong_AsUnsignedLongLong O ?Culonglong"
safe = false

### FLOAT

[pyfloattype]
cachedobj = {cobj="PyFloat_Type"}
caller = "pyfloat"
typechecker = "pyisfloat"

[pyfloat]
cfunc = ["PyNumber_Float O O", "PyFloat_FromDouble =Real/Cdouble O"]

[pyfloat_asdouble]
cfunc = "PyFloat_AsDouble O ?Cdouble"
safe = false

### COMPLEX

[pycomplextype]
cachedobj = {cobj="PyComplex_Type"}
caller = "pycomplex"
typechecker = "pyiscomplex"

[pycomplex]
cfunc = "PyComplex_FromDoubles =Real/Cdouble =Real/Cdouble O"

[pycomplex_realasdouble]
cfunc = "PyComplex_RealAsDouble O ?Cdouble"
safe = false

[pycomplex_imagasdouble]
cfunc = "PyComplex_ImagAsDouble O ?Cdouble"
safe = false

### TUPLE

[pytupletype]
cachedobj = {cobj="PyTuple_Type"}
caller = "pytuple"

[pyistuple]
typechecks_fast = "CPy_TPFLAGS_TUPLE_SUBCLASS"

[pytuple_new]
cfunc = "PyTuple_New =Any/CPy_ssize_t O"
safe = false

[pytuple_setitem]
cfunc = "PyTuple_SetItem O =Any/CPy_ssize_t !O V"
safe = false

### LIST

[pylisttype]
cachedobj = {cobj="PyList_Type"}
caller = "pylist"

[pyislist]
typechecks_fast = "CPy_TPFLAGS_LIST_SUBCLASS"

[pylist_new]
cfunc = "PyList_New =Any/CPy_ssize_t O"
safe = false

[pylist_append]
cfunc = "PyList_Append O O V"
safe = false

### BYTE ARRAY

[pybytearraytype]
cachedobj = {cobj="PyByteArray_Type"}
caller = "pybytearray"
typechecker = "pyisbytearray"

### DICT

[pydicttype]
cachedobj = {cobj="PyDict_Type"}
caller = "pydict"

[pyisdict]
typechecks_fast = "CPy_TPFLAGS_DICT_SUBCLASS"

[pydict]
cfunc = "PyDict_New O"

[pydict_setitem]
cfunc = "PyDict_SetItem O O O V"
safe = false

[pydict_setitem_string]
cfunc = "PyDict_SetItemString O S O V"
safe = false

### SET

[pysettype]
cachedobj = {cobj="PySet_Type"}
caller = "pyset"
typechecker = "pyisset"

[pyfrozensettype]
cachedobj = {cobj="PyFrozenSet_Type"}
caller = "pyfrozenset"
typechecker = "pyisfrozenset"

[pyset_new]
cfunc = "PySet_New =Ptr/Ptr{Cvoid} O"
safe = false

[pyfrozenset_new]
cfunc = "PyFrozenSet_New =Ptr/Ptr{Cvoid} O"
safe = false

[pyset_add]
cfunc = "PySet_Add O O V"
safe = false

### SLICE

[pyslicetype]
cachedobj = {cobj="PySlice_Type"}
caller = "pyslice"
typechecker = "pyisslice"

### ELLIPSIS

[pyellipsis]
cachedobj = {cobj="_Py_EllipsisObject"}

[pyellipsistype]
cachedobj = {expr="unsafe_pytype(unsafe_pyellipsis())"}

### BUILTINS

[pybuiltinsmodule]
cachedobj = {expr="pyimport(\"builtins\")"}

[pyrangetype]
cachedobj = {expr="unsafe_pybuiltin(\"range\")"}
caller = "pyrange"
typechecker = "pyisrange"

[pyhelpfunction]
cachedobj = {expr="unsafe_pybuiltin(\"help\")"}
export = false
caller = "pyhelp"

[pyevalfunction]
cachedobj = {expr="unsafe_pybuiltin(\"eval\")"}
export = false
caller = "pyeval"

[pyexecfunction]
cachedobj = {expr="unsafe_pybuiltin(\"exec\")"}
export = false
caller = "pyexec"

### DATETIME

[pydatetype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "date")"""}
caller = "pydate"

[pytimetype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "time")"""}
caller = "pytime"

[pydatetimetype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "datetime")"""}
caller = "pydatetime"

[pytimedeltatype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "timedelta")"""}
caller = "pytimedelta"

[pytzinfotype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "tzinfo")"""}
caller = "pytzinfo"

[pytimezonetype]
cachedobj = {expr="""unsafe_pyimportattr("datetime", "timezone")"""}
caller = "pytimezone"

### FRACTIONS

[pyfractiontype]
cachedobj = {expr="""unsafe_pyimportattr("fractions", "Fraction")"""}
caller = "pyfraction"

### NUMBERS

[pyadd]
cfunc = "PyNumber_Add O O O"

[pysub]
cfunc = "PyNumber_Subtract O O O"

[pymul]
cfunc = "PyNumber_Multiply O O O"

[pymatmul]
cfunc = "PyNumber_MatrixMultiply O O O"

[pyfloordiv]
cfunc = "PyNumber_FloorDivide O O O"

[pytruediv]
cfunc = "PyNumber_TrueDivide O O O"

[pymod]
cfunc = "PyNumber_Remainder O O O"

[pydivmod]
cfunc = "PyNumber_Divmod O O O"

[pypow]
cfunc = "PyNumber_Power O O O O"

[pyneg]
cfunc = "PyNumber_Negative O O"

[pypos]
cfunc = "PyNumber_Positive O O"

[pyabs]
cfunc = "PyNumber_Absolute O O"

[pyinv]
cfunc = "PyNumber_Invert O O"

[pylshift]
cfunc = "PyNumber_Lshift O O O"

[pyrshift]
cfunc = "PyNumber_Rshift O O O"

[pyand]
cfunc = "PyNumber_And O O O"

[pyxor]
cfunc = "PyNumber_Xor O O O"

[pyor]
cfunc = "PyNumber_Or O O O"

[pyiadd]
cfunc = "PyNumber_InplaceAdd O O O"

[pyisub]
cfunc = "PyNumber_InplaceSubtract O O O"

[pyimul]
cfunc = "PyNumber_InplaceMultiply O O O"

[pyimatmul]
cfunc = "PyNumber_InplaceMatrixMultiply O O O"

[pyifloordiv]
cfunc = "PyNumber_InplaceFloorDivide O O O"

[pyitruediv]
cfunc = "PyNumber_InplaceTrueDivide O O O"

[pyimod]
cfunc = "PyNumber_InplaceRemainder O O O"

[pyidivmod]
cfunc = "PyNumber_InplaceDivmod O O O"

[pyipow]
cfunc = "PyNumber_InplacePower O O O O"

[pyineg]
cfunc = "PyNumber_InplaceNegative O O"

[pyipos]
cfunc = "PyNumber_InplacePositive O O"

[pyiabs]
cfunc = "PyNumber_InplaceAbsolute O O"

[pyiinv]
cfunc = "PyNumber_InplaceInvert O O"

[pyilshift]
cfunc = "PyNumber_InplaceLshift O O O"

[pyirshift]
cfunc = "PyNumber_InplaceRshift O O O"

[pyiand]
cfunc = "PyNumber_InplaceAnd O O O"

[pyixor]
cfunc = "PyNumber_InplaceXor O O O"

[pyior]
cfunc = "PyNumber_InplaceOr O O O"

[pyindex]
cfunc = "PyNumber_Index O O"

### NUMERIC ABC

[pynumberabc]
cachedobj = {expr="""unsafe_pyimportattr("numbers", "Number")"""}

[pycomplexabc]
cachedobj = {expr="""unsafe_pyimportattr("numbers", "Complex")"""}

[pyrealabc]
cachedobj = {expr="""unsafe_pyimportattr("numbers", "Real")"""}

[pyrationalabc]
cachedobj = {expr="""unsafe_pyimportattr("numbers", "Rational")"""}

[pyintegralabc]
cachedobj = {expr="""unsafe_pyimportattr("numbers", "Integral")"""}

### COLLECTIONS ABC

[pycontainerabc]
cachedobj = {expr="""unsafe_pyimportattr("collections.abc", "Container")"""}

[pysequenceabc]
cachedobj = {expr="""unsafe_pyimportattr("collections.abc", "Sequence")"""}

[pymappingabc]
cachedobj = {expr="""unsafe_pyimportattr("collections.abc", "Mapping")"""}

[pysetabc]
cachedobj = {expr="""unsafe_pyimportattr("collections.abc", "Set")"""}

### IO

[pyiobasetype]
cachedobj = {expr="""unsafe_pyimportattr("io", "IOBase")"""}

[pyrawiobasetype]
cachedobj = {expr="""unsafe_pyimportattr("io", "RawIOBase")"""}

[pybufferediobasetype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BufferedIOBase")"""}

[pytextiobasetype]
cachedobj = {expr="""unsafe_pyimportattr("io", "TextIOBase")"""}

[pyfileiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "FileIO")"""}
caller = "pyfileio"

[pybytesiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BytesIO")"""}
caller = "pybytesio"

[pybufferedreaderiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BufferedReader")"""}
caller = "pybufferedreaderio"

[pybufferedwriteriotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BufferedWriter")"""}
caller = "pybufferedwriterio"

[pybufferedrandomiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BufferedRandom")"""}
caller = "pybufferedrandomio"

[pybufferedrwiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "BufferedRW")"""}
caller = "pybufferedrwio"

[pytextiowrappertype]
cachedobj = {expr="""unsafe_pyimportattr("io", "TextIOWrapper")"""}
caller = "pytextiowrapper"

[pystringiotype]
cachedobj = {expr="""unsafe_pyimportattr("io", "StringIO")"""}
caller = "pystringio"
